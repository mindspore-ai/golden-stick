# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Conv2dBnWithoutFoldQuant."""
from __future__ import absolute_import

import mindspore.common.dtype as mstype
from mindspore import Tensor
from mindspore.ops import operations as P
from mindspore.common.parameter import Parameter
from mindspore.nn.layer.normalization import BatchNorm2d
from mindspore_gs.common import BackendTarget
from mindspore_gs.quantization.simulated_quantization.combined import Conv2dBn
from mindspore_gs.quantization.quant_cell import QuantCell
from mindspore_gs.quantization.layer_policy import LayerPolicy, PerChannelArgs
from mindspore_gs.quantization.quant_utils import without_fold_batchnorm


class Conv2dBnWithoutFoldQuant(QuantCell):
    r"""
    2D convolution and batchnorm without fold with fake quantized construct.

    This part is a more detailed overview of Conv2d operation. For more details about Quantization,
    please refer to the implementation of class of `FakeQuantWithMinMaxObserver`,
    :class:`mindspore.nn.FakeQuantWithMinMaxObserver`.

    .. math::
        y =x\times quant(w)+  b

        y_{bn} =\frac{y-E[y] }{\sqrt{Var[y]+  \epsilon  } } *\gamma +  \beta

    where :math:`quant` is the continuous execution of quant and dequant, you can refer to the implementation of
    class of `FakeQuantWithMinMaxObserver`, :class:`mindspore.nn.FakeQuantWithMinMaxObserver`.

    Args:
        in_channels (int): The number of input channel :math:`C_{in}`.
        out_channels (int): The number of output channel :math:`C_{out}`.
        kernel_size (Union[int, tuple[int]]): Specifies the height and width of the 2D convolution window.
        stride (Union[int, tuple[int]]): Specifies stride for all spatial dimensions with the same value. Default: 1.
        pad_mode (str): Specifies padding mode. The optional values are "same", "valid", "pad". Default: "same".
        padding (Union[int, tuple[int]]): Implicit paddings on both sides of the `x`. Default: 0.
        dilation (Union[int, tuple[int]]): Specifies the dilation rate to use for dilated convolution. Default: 1.
        group (int): Splits filter into groups, `in_ channels` and `out_channels` must be
            divisible by the number of groups. Default: 1.
        has_bias (bool): Specifies whether the layer uses a bias vector. Default: False.
        eps (float): Parameters for Batch Normalization. Default: 1e-5.
        momentum (float): Parameters for Batch Normalization op. Default: 0.997.
        weight_init (Union[Tensor, str, Initializer, numbers.Number]): Initializer for the convolution kernel.
            Default: 'normal'.
        bias_init (Union[Tensor, str, Initializer, numbers.Number]): Initializer for the bias vector. Default: 'zeros'.
        quant_config (QuantConfig): Configures the types of quant observer and quant settings of weight and
            activation. Note that, QuantConfig is a special namedtuple, which is designed for quantization
            and can be generated by :func:`mindspore.compression.quant.create_quant_config` method.
            Default: QuantConfig with both items set to default :class:`FakeQuantWithMinMaxObserver`.

    Inputs:
        - **x** (Tensor) - Tensor of shape :math:`(N, C_{in}, H_{in}, W_{in})`.

    Outputs:
        Tensor of shape :math:`(N, C_{out}, H_{out}, W_{out})`.

    Supported Platforms:
        ``Ascend`` ``GPU``

    Raises:
        TypeError: If `in_channels`, `out_channels` or `group` is not an int.
        TypeError: If `kernel_size`, `stride`, `padding` or `dilation` is neither an int nor a tuple.
        TypeError: If `has_bias` is not a bool.
        ValueError: If `in_channels`, `out_channels`, `kernel_size`, `stride` or `dilation` is less than 1.
        ValueError: If `padding` is less than 0.
        ValueError: If `pad_mode` is not one of 'same', 'valid', 'pad'.

    Examples:
        >>> import numpy as np
        >>> import mindspore
        >>> from mindspore import Tensor, nn
        >>> conv2d_no_bnfold = nn.Conv2dBnWithoutFoldQuant(1, 1, kernel_size=(2, 2), stride=(1, 1), pad_mode="valid",
        ...                                                weight_init='ones')
        >>> x = Tensor(np.array([[[[1, 0, 3], [1, 4, 7], [2, 5, 2]]]]), mindspore.float32)
        >>> result = conv2d_no_bnfold(x)
        >>> print(result)
        [[[[5.929658  13.835868]
           [11.859316  17.78116]]]]
    """

    def __init__(self, handler: Conv2dBn, policy: LayerPolicy):
        """Initialize Conv2dBnWithoutFoldQuant."""
        if not handler.has_bn:
            raise ValueError(f"For '{self.cls_name}', input Conv2dBn should has batchnorm.")
        super(Conv2dBnWithoutFoldQuant, self).__init__(handler, policy)
        self.in_channels = handler.in_channels
        self.out_channels = handler.out_channels
        self.kernel_size = handler.kernel_size
        self.stride = handler.stride
        self.dilation = handler.dilation
        self.pad_mode = handler.pad_mode
        self.padding = handler.padding
        self.group = handler.group
        self.has_bias = handler.has_bias
        self.bias_add = P.BiasAdd()
        if self.has_bias:
            self.bias = handler.bias
        # initialize convolution op and Parameter
        self.conv = P.Conv2D(out_channel=self.out_channels,
                             kernel_size=self.kernel_size,
                             mode=1,
                             pad_mode=self.pad_mode,
                             pad=self.padding,
                             stride=self.stride,
                             dilation=self.dilation,
                             group=self.group)
        self.weight = handler.weight
        channel_axis = 0
        weight_perchannel_args = PerChannelArgs(self.out_channels, channel_axis)
        self._weight_quantizer = policy.get_weight_quantizer(self.weight.name, weight_perchannel_args)
        self.batchnorm = BatchNorm2d(self.out_channels, eps=handler.batchnorm.eps, momentum=handler.batchnorm.momentum)

    def weight_quantizer(self):
        return self._weight_quantizer

    def convert(self, backend: BackendTarget = BackendTarget.NONE, is_deploy=False):
        if self._converted:
            return
        if backend is not BackendTarget.NONE:
            raise ValueError("Only support convert to MS Backend now, got: ", backend)
        if self.has_bias and self.bias:
            raise ValueError("Only support conv2d with out bias.")
        super(Conv2dBnWithoutFoldQuant, self).convert(backend, is_deploy)
        self._weight_quantizer = self._weight_quantizer.convert_to_fakequantparam()
        weight, bias = without_fold_batchnorm(self.weight.data.asnumpy(), self)
        weight_tensor = Tensor(weight)
        bias_tensor = Tensor(bias, mstype.float32)
        self.weight = Parameter(weight_tensor, name=f"{self.weight.name}_bnfold")
        bias_name = f"{self.weight.name}_bias_bnfold"
        self.bias = Parameter(bias_tensor, name=bias_name)
        self.has_bias = True

    # pylint: disable=arguments-differ
    def core_construct(self, x):
        """construct."""
        weight = self._weight_quantizer(self.weight)
        out = self.conv(x, weight)
        if self.has_bias:
            out = self.bias_add(out, self.bias)
        out = self.batchnorm(out)
        return out

    def extend_repr(self):
        """Display instance object as string."""
        s = 'in_channels={}, out_channels={}, kernel_size={}, stride={}, ' \
            'pad_mode={}, padding={}, dilation={}, group={}, ' \
            'has_bias={}'.format(self.in_channels, self.out_channels, self.kernel_size, self.stride, self.pad_mode,
                                 self.padding, self.dilation, self.group, self.has_bias)
        return s
